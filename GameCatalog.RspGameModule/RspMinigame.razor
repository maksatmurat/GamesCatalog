@page "/rsp"
<link href="RspGame/css/site.css" rel="stylesheet" />
@using System.Timers
@using GameCatalog.RspGameModule.Helpers
@rendermode InteractiveServer
@implements IDisposable


<div class="row text-center">
    <div class="col">
        <h1 class="text-success">RSP Minigama</h1>
    </div>
</div>
@if (!string.IsNullOrWhiteSpace(gameResultMessage))
{

    <div class="row">
        <div class="col text-center alert-@resultStyle">
            <h3>@gameResultMessage</h3>
        </div>
    </div>
}
<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <img src="@opponent?.Image" class="general-image" alt="paper" />
    </div>
</div>


<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <button @onclick="ResetGame" class="btn btn-primary">
            Start New Game
        </button>
    </div>
</div>

<div class="row text-center justify-content-around">
    @foreach (var item in games)
    {
        <div class="col">
            <img src="@item.Image" @onclick="(()=>SelectingHandler(item))" class="general-image hovered-image" alt="rock" />
        </div>
    }
</div>


@code{

    List<GameHandler> games = new List<GameHandler>()
{
        new GameHandler{Choose = RSPOptions.Paper,LoosCondition = RSPOptions.Scissors,WinCondition=RSPOptions.Rock,Image="/RspGame/images/paper.png"},
        new GameHandler{Choose = RSPOptions.Rock,LoosCondition = RSPOptions.Paper,WinCondition=RSPOptions.Scissors,Image="/RspGame/images/rock.png"},
        new GameHandler{Choose = RSPOptions.Scissors,LoosCondition = RSPOptions.Rock,WinCondition=RSPOptions.Paper,Image="/RspGame/images/scissors.png"},

    };
    GameHandler? opponent;
    Random? rnd;
    Timer? timer;



    protected override void OnInitialized()
    {
        opponent = games[0];
        rnd = new Random();

        timer = new Timer(100);
        timer.Elapsed += ElapsedTimer;
        timer.Start();
    }

    int imageIndex = 0;

    void ElapsedTimer(object? sender, ElapsedEventArgs args)
    {
        Task.Run(async () =>
        {

            imageIndex = rnd!.Next(0, games.Count);
            opponent = games[imageIndex];
            await InvokeAsync(StateHasChanged);
        });
    }
    string gameResultMessage = string.Empty;
    string resultStyle = string.Empty;

    void SelectingHandler(GameHandler game)
    {
        timer?.Stop();
        GameState gameResult = game.GameResult(opponent!);

        switch (gameResult)
        {
            case GameState.Victory:
                gameResultMessage = "Congratulation! You won";
                resultStyle = "success";
                break;
            case GameState.Loss:
                gameResultMessage = "Fail! You lost";
                resultStyle = "danger";
                break;
            case GameState.Draw:
                gameResultMessage = "Draw! Congratularion to both";
                resultStyle = "primary";
                break;
        }
    }

    void ResetGame()
    {
        timer.Start();
        gameResultMessage = string.Empty;
        resultStyle = string.Empty;
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
            timer = null;
        }
    }

}

